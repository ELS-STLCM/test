<project name="init" default="init" basedir="." >
  <description>.NET Build Framework - Reusable NAnt build</description>
  <!-- This script can / should only be called from project.build to ensure appropriate variable definition -->

  <!-- general non-project properties -->
  <include buildfile="custom.properties.xml"/>
  
  <!-- date functions and property setting -->
	<property name="CurDate" value="${datetime::now()}" />
	<property name="FormattedDate"
		  value="${datetime::get-year(datetime::now())}${datetime::get-month(datetime::now())}${datetime::get-day(datetime::now())}" />
	<property name="HourMinStamp"
		  value="${datetime::get-hour(datetime::now())}${datetime::get-minute(datetime::now())}${datetime::get-second(datetime::now())}" />
	<property name="MyDate" value="${FormattedDate}.${HourMinStamp}" />
  
  <!-- End properties   -->
  
  <!-- begin framework targets -->
	<target name="init">
		<echo message="Start of init" />
		<echo message="ProjectBaseDir is: ${project::get-base-directory()}" />
		<property name="ProjectBaseDir" value="${project::get-base-directory()}" />
		
		<echo message="Find SVN Revision, I need to change this badly" />
		
		<call target="find-svnrevision" />
		<call target="Validate Project" />
		
		<!-- <property name="build.name" value="${ProjName}.${ReleaseVersion}.${SVN.REV}" /> -->
		<property name="build.name" value="${BUILD.JOB}.${BUILD.NUMBER}" />
		
		<property name="ProjBuildDir" value="${BuildBaseDir}/${build.name}"/>
		<delete dir="${ProjBuildDir}" if="${directory::exists('ProjBuildDir')}" />
		
	</target>
	
	<target name="find-gitbranch">
	
	<!--Get the information from .git/config -->

		<echo message="Retrieving file contents"/>
		<property name="file.contents" value="0" />
		<loadfile file="file.txt" property="file.contents" />
		<property name="file.contents" value="${string::trim(file.contents)}" />
		<echo message="contents of file is  ${file.contents}"/>
		<!-- I do not like using the any character instead of a quotation mark for this, but not sure how to it otherwise  -->
		<regex pattern=".*?\[branch .(?'svn.url'[\-\w\.]+)$" input="${file.contents}" />
		<echo message="Branch is: ${svn.url}"/>
		
		<property name="SVN.Branch" value="${svn.url}" />
		

	</target>
	
	<target name="find-svnrevision">
	
		<property name="svn.revision" value="0"/>
		<exec program="svn"
			  commandline='info "${ProjectBaseDir}" --xml'
			  output="svninfo.xml"
			  failonerror="false"/>
		<xmlpeek
			  file="svninfo.xml"
			  xpath="/info/entry/@revision"
			  property="svn.revision"
			  failonerror="false"/>
			<property name="SVN.REV" value="${svn.revision}"/>
			
		<xmlpeek file="svninfo.xml" xpath="/info/entry/url" property="svn.url" />
		<property name="SVN.Branch" value="${svn.url}" />
		
		<delete file="svninfo.xml" failonerror="false" />
	
	</target>
	
	<target name="Validate Project" verbose="true" >
	
		<if test="${string::contains(ProjName,'[project name here]')}">
			<fail message="Incomplete custom_properties.xml. Review and update." />
		</if>
		
		<if test="${property::exists('ReleaseVersion')}">
			<property name="ProjRepo" value="${SVNBranches}/${ReleaseVersion}" />
		</if>

		<if test="${not property::exists('ReleaseVersion')}">
			<property name="ReleaseVersion" value="trunk" />
			<property name="ProjRepo" value="${SVNTrunkDir}" />
		</if>
		
		<if test="${not string::contains(SVN.Branch, ProjRepo)}" >
			<fail message="SVN URL Path mismatch:
			Provided URL: ${ProjRepo}
			Current URL : ${SVN.Branch}" />
		</if>
		<echo message="Project verified. Proceeding to build."/>
	</target>
	
	
	

  
</project>